<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yingside.mapper.UserMapper">
    <resultMap id="userMap" type="user">
        <id column="id" property="id" />
        <result column="user_tel" property="userTel"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="registration_time" property="registrationTime"/>
    </resultMap>

    <sql id="insertCodeSnippet">
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="userTel != null">
                user_tel,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="registrationTime != null" >
                registration_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userTel != null" >
                #{userTel,jdbcType=VARCHAR},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                md5(#{password,jdbcType=VARCHAR}),
            </if>
            <if test="registrationTime != null" >
                #{registrationTime,jdbcType=VARCHAR},
            </if>
        </trim>
    </sql>

    <select id="getUser" parameterType="int"
            resultMap="userMap">
        select * from t_user where id=${value}
    </select>
    <!-- 查询 t_user 表中所有用户数据 -->
    <select id="getAll" resultMap="userMap">
        select * from t_user
    </select>

    <!-- 根据名称模糊查询用户信息 -->
    <select id="getUserByName" parameterType="string" resultMap="userMap">
        select * from t_user where username like '%#{username}%'
    </select>

    <!--多条件查询动态SQL-->
    <select id="getUserBySelective" parameterType="user" resultMap="userMap">
        select * from t_user
        <!--<where>-->
            <!--<if test="id >= 1">-->
                <!--id=#{id}-->
            <!--</if>-->
            <!--<if test="userTel != null">-->
                <!--and user_tel like '%${userTel}%'-->
            <!--</if>-->
            <!--<if test="username != null">-->
                <!--and username like '%${username}%'-->
            <!--</if>-->
            <!--<if test="registrationTime != null">-->
                <!--and Date_Format(registration_time,'%Y-%m-%d')=#{registrationTime}-->
            <!--</if>-->
        <!--</where>-->
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="id >= 1">
                id=#{id}
            </if>
            <if test="userTel != null">
                and user_tel like '%${userTel}%'
            </if>
            <if test="username != null">
                and username like '%${username}%'
            </if>
            <if test="registrationTime != null">
                and Date_Format(registration_time,'%Y-%m-%d')=#{registrationTime}
            </if>
        </trim>
    </select>

    <!--多条件查询动态SQL,使用where...choose(when...otherwise)组合-->
    <select id="getUserBySelective2" parameterType="user" resultMap="userMap">
        select * from t_user
        <where>
            <choose>
                <when test="id >= 1">
                  id=#{id}
                </when>
                <when test="userTel != null">
                  and user_tel like '%${userTel}%'
                </when>
                <when test="username != null">
                  and username like '%${username}%'
                </when>
                <otherwise>
                  and Date_Format(registration_time,'%Y-%m-%d')=#{registrationTime}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--根据传入的所有id查询员工相关信息,这里传入参数使用了专门的查询实体类QueryBean-->
    <select id="getUserByQueryIds" parameterType="queryBean" resultMap="userMap">
        select * from t_user
        <where>
            <!--
                collection:指定输入对象中的集合属性
                item:每次遍历生成的对象
                open:开始遍历时的拼接字符串
                close:结束时拼接的字符串
                separator:遍历对象之间需要拼接的字符串
                select * from t_user where (id=1 or id=4 or id=5 or id=8)

            <foreach collection="ids" item="id" open="(" close=")" separator="or">
                id=#{id}
            </foreach>
            -->

            <!-- select * from t_user where id in (1, 4, 5, 8) -->
            <foreach collection="ids" item="id" open="id in (" close=")" separator=",">
                #{id}
            </foreach>
        </where>
    </select>


    <!-- 向 t_user 表插入一条数据 -->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into t_user(id,user_tel,username,password,registration_time)
            value(null,#{userTel},#{username},md5(#{password}),#{registrationTime})
    </insert>

    <!--根据传入的参数新增用户信息-->
    <insert id="insertUserSelective" parameterType="user"
            useGeneratedKeys="true" keyProperty="id">
        insert into t_user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="userTel != null">
                user_tel,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="registrationTime != null" >
                registration_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userTel != null" >
                #{userTel,jdbcType=VARCHAR},
            </if>
            <if test="username != null" >
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                md5(#{password,jdbcType=VARCHAR}),
            </if>
            <if test="registrationTime != null" >
                #{registrationTime,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <!--根据传入的参数新增用户信息 使用SQL代码片段-->
    <insert id="insertUserSelective2" parameterType="user"
            useGeneratedKeys="true" keyProperty="id">
        insert into t_user
        <!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace -->
        <include refid="insertCodeSnippet"></include>
    </insert>


    <!-- 根据 id 删除 t_user 表的数据 -->
    <delete id="deleteUserById" parameterType="int">
        delete from t_user where id=#{id}
    </delete>

    <!-- 根据 id 更新 t_user 表的数据 -->
    <update id="updateUserById" parameterType="user">
      update t_user set user_tel=#{userTel},username=#{username},
      password=md5(#{password}),registration_time=#{registrationTime}
      where id=#{id}
    </update>

    <!--根据 id 和 传入的数据更新 t_user表数据-->
    <update id="updateUserByIdSelective" parameterType="user">
      update t_user
      <trim prefix="set" suffixOverrides=",">
          <if test="userTel != null">
              user_tel=#{userTel},
          </if>
          <if test="username != null">
              username=#{username},
          </if>
          <if test="password != null">
              password=md5(#{password}),
          </if>
          <if test="registrationTime != null">
              registration_time=#{registrationTime}
          </if>
      </trim>
      where id=#{id}
    </update>
</mapper>